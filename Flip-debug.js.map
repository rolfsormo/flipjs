{
  "version": 3,
  "file": "/Users/rolf/dev/git/flipjs/Flip-debug.js",
  "sources": [
    "lib/Flip.js",
    "lib/KeyValueAdapter.js",
    "lib/adapters/LocalStorage.js",
    "lib/adapters/MemStorage.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzEA,AD0EA;ACzzGA,AD0GA;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA,ADuEA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "sourcesContent": [
    "\n/*! Flip.js | (c) 2013 Rolf Sormo | https://github.com/rolfsormo/flipjs */\n\n(function (root, factory) {\n  var moduleName = 'Flip';\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(moduleName, factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root[moduleName] = factory();\n  }\n}(this, function () {\n\n  function Flip() {\n    this.adapters = [];\n  }\n  Flip.toString = function() {\n    return 'Flip';\n  };\n\n  Flip.prototype.addAdapter = function(adapter) {\n    this.adapters.push(adapter);\n  };\n\n  Flip.prototype.getAdapter = function(options) {\n    for(var i = 0; i < this.adapters.length; i++) {\n      var o, k;\n      var adapterName = this.adapters[i].adapterName;\n\n      if (options.common) {\n        o = {};\n        for(k in Object.keys(options.common)) o[k] = options.common[k];\n        if (options[adapterName]) {\n          for(k in Object.keys(options[adapterName])) o[k] = options[adapterName][k];\n        }\n      } else {\n        o = options;\n      }\n      if (this.adapters[i].detect(o)) return this.adapters[i];\n    }\n  };\n\n  Flip.prototype.connect = function(url, options, next) {\n    if (typeof options == 'function') {\n      next = options;\n      options = {};\n    }\n    var adapter = this.getAdapter(options);\n    if (!adapter) throw new Error('No suitable adapter found');\n\n    (new adapter(options)).connect(url, next);\n  };\n\n  Flip.prototype.generateId = function() {\n    function format(i) {\n      return i.toString(16).substring(1);\n    }\n    function r() {\n      return Math.floor((1 + Math.random()) * 0x10000);\n    }\n    return format(new Date().getTime()) + format(r()) + format(r()) + format(r());\n  };\n\n  return new Flip();\n}));\n\n\ndefine(\"Flip\", function(){});\n",
    "\n/*! Flip.js | (c) 2013 Rolf Sormo | https://github.com/rolfsormo/flipjs */\n\n(function (root, factory) {\n  var moduleName = 'KeyValueAdapter';\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(moduleName, ['Flip', 'MongoMatcher'], factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory(require('./Flip'), require('./MongoMatcher'));\n  } else {\n    // Browser globals (root is window)\n    root[moduleName] = factory(root.Flip, root.MongoMatcher);\n  }\n}(this, function (Flip, MongoMatcher) {\n\n  return function(adapter) {\n\n    function KeyValueAdapter(options) {\n      this.options = options;\n    }\n\n    // \"Statics\"\n    KeyValueAdapter.adapterName = adapter.adapterName;\n\n    KeyValueAdapter.detect = function(options) {\n      return adapter.detect(options);\n    };\n\n    KeyValueAdapter.toString = function()  {\n      return \"KeyValueAdapter::\" + adapter.adapterName;\n    };\n\n    // \"Non-statics\"\n    KeyValueAdapter.prototype.connect = function(dbName, next) {\n      this.dbName = dbName;\n      this.system = adapter.get('system') ||Â {};\n      this.system.collections = this.system.collections || {};\n      // TODO: load system from db.\n      next(undefined, this);\n    };\n    function hasCollectionKey(collections, key) {\n      for(var k in collections) if (collections[k].key === key) return true;\n    }\n\n    KeyValueAdapter.prototype.collection = function(collection, options) {\n      var kva = this;\n      var sys = this.system.collections[collection] || {};\n\n      sys.key = sys.key || (this.dbName.substring(0,2) + collection.substring(0,2));\n      var i = 0;\n      while (hasCollectionKey(this.system.collections, sys.key)) {\n        sys.key = sys.key + i;\n        i++;\n      }\n\n      function KVACollection() {\n      }\n      KVACollection.prototype.find = function(criteria, next) {\n        var matcher = new MongoMatcher(criteria);\n        var ids = adapter.keys(kva.dbName, collection);\n        var res = [];\n        for(var i = 0; i < ids.length; i++) {\n          var v = adapter.get(kva.dbName, collection, ids[i]);\n          var ob = JSON.parse(v);\n          if (matcher.match(ob)) res.push(ob);\n        }\n        if (next) next(undefined, res);\n      };\n      KVACollection.prototype.insert = function(ob, next) {\n        ob._id = ob._id || Flip.generateId();\n        adapter.set(kva.dbName, collection, ob._id, JSON.stringify(ob));\n        if (next) next(undefined, ob);\n      };\n      KVACollection.prototype.update = function(ob, next) {\n        adapter.set(kva.dbName, collection, ob._id, JSON.stringify(ob));\n        if (next) next(undefined, ob);\n      };\n      KVACollection.prototype.remove = function(criteria, next) {\n        this.find(criteria, function(err, list) {\n          for(var i = 0; i < list.length; i++) adapter.remove(kva.dbName, collection, list[i]._id);\n          if (next) next();\n        });\n      };\n      this[collection] = new KVACollection();\n      return this[collection];\n    };\n\n    KeyValueAdapter.prototype.dropDatabase = function(next) {\n      adapter.dropDatabase(this.dbName);\n      if (next) next();\n    };\n    KeyValueAdapter.prototype.toString = function()  {\n      return \"KeyValueAdapter::\" + adapter.adapterName + '//' + this.dbName;\n    };\n\n    return KeyValueAdapter;\n  };\n\n}));\n\n\ndefine(\"KeyValueAdapter\", function(){});\n",
    "\n/*! Flip.js | (c) 2013 Rolf Sormo | https://github.com/rolfsormo/flipjs */\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    require(['Flip', 'KeyValueAdapter'], factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    factory(require('../Flip'), require('../KeyValueAdapter'));\n  } else {\n    // Browser globals (root is window)\n     factory(root.Flip, root.KeyValueAdapter);\n  }\n}(this, function (Flip, KeyValueAdapter) {\n  var debug = true;\n\n  Flip.addAdapter(KeyValueAdapter({\n    adapterName: 'LocalStorage',\n    detect: function(options) {\n      try {\n        return 'localStorage' in window && window.localStorage !== null;\n      } catch (e) {\n        return false;\n      }\n    },\n    keys: function(db, collection) {\n      var k = [];\n      for(var i = 0; i < localStorage.length; i++) {\n        var r = localStorage.key(i).split('_');\n        if (r[0] === db && r[1] == collection) k.push(r[2]);\n      }\n      return k;\n    },\n    get: function(db, collection, key) {\n      if (debug) console.log('-> GET', db, collection, key);\n      var o = window.localStorage.getItem(db + '_' + collection + '_' + key);\n      return o;\n    },\n    set: function(db, collection, key, value) {\n      if (debug) console.log('-> SET', db, collection, key, value);\n      window.localStorage.setItem(db + '_' + collection + '_' + key, value);\n    },\n    remove: function(db, collection, key) {\n      if (debug) console.log('-> REMOVE', db, collection, key);\n      window.localStorage.removeItem(db + '_' + collection + '_' + key);\n    },\n    dropCollection: function(db, collection) {\n      if (debug) console.log('-> DROP COLLECTION', db, collection);\n      for(var i = 0; i < localStorage.length; i++) {\n        var r = localStorage.key(i).split('_');\n        console.log('r', r);\n        if (r[0] === db && r[1] == collection) localStorage.removeItem(localStorage.key(i));\n      }\n    },\n    dropDatabase: function(db) {\n      if (debug) console.log('-> DROP DB', db);\n      for(var i = 0; i < localStorage.length; i++) {\n        var r = localStorage.key(i).split('_');\n        console.log('r', r);\n        if (r[0] === db) localStorage.removeItem(localStorage.key(i));\n      }\n    }\n  }));\n}));\n\n\n\ndefine(\"adapters/LocalStorage\", function(){});\n",
    "\n/*! Flip.js | (c) 2013 Rolf Sormo | https://github.com/rolfsormo/flipjs */\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    require(['Flip', 'KeyValueAdapter'], factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    factory(require('../Flip'), require('../KeyValueAdapter'));\n  } else {\n    // Browser globals (root is window)\n     factory(root.Flip, root.KeyValueAdapter);\n  }\n}(this, function (Flip, KeyValueAdapter) {\n  var debug = false;\n\n  var ob = {};\n  Flip.addAdapter(KeyValueAdapter({\n    adapterName: 'MemStorage',\n    detect: function(options) {\n      return !options.requirePersistency;\n    },\n    keys: function(db, collection) {\n      if (debug) console.log('[ KEYS', db, collection);\n      return (ob[db] && Object.keys(ob[db])) || [];\n    },\n    get: function(db, collection, key) {\n      if (debug) console.log('[ GET', db, collection, key);\n      return ob[db] && ob[db][key];\n    },\n    set: function(db, collection, key, value) {\n      if (debug) console.log('[ SET', db, collection, key, value);\n      ob[db] = ob[db] ||Â {};\n      ob[db][key] = value;\n    },\n    remove: function(db, collection, key) {\n      if (debug) console.log('[ REMOVE', db, collection, key);\n      if (ob[db]) delete ob[db][key];\n    },\n    dropCollection: function(db, collection) {\n      if (debug) console.log('[ DROP COLLECTION', db, collection);\n      delete ob[db];\n    },\n    dropDatabase: function(db) {\n      if (debug) console.log('[ DROP DB', db);\n      delete ob[db];\n    }\n  }));\n}));\n\n\n\ndefine(\"adapters/MemStorage\", function(){});\n"
  ]
}