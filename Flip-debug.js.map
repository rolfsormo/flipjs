{
  "version": 3,
  "file": "/Users/rolfsormo/dev/personal/git/flipjs/Flip-debug.js",
  "sources": [
    "Flip.js",
    "KeyValueAdapter.js",
    "adapters/LocalStorage.js",
    "adapters/MemStorage.js",
    "adapters/FileStorage.js"
  ],
  "names": [],
  "mappingszDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA,ADqDA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "sourcesContent": [
    "/*! Flip.js | (c) 2013 Rolf Sormo | https://github.com/rolfsormo/flipjs */\n\n(function (root, factory) {\n  var moduleName = 'Flip';\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(moduleName, factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    // Browser globals (root is window)\n    root[moduleName] = factory();\n  }\n}(this, function () {\n\n  function Flip() {\n    this.adapters = [];\n  }\n  Flip.toString = function() {\n    return 'Flip';\n  };\n\n  Flip.prototype.addAdapter = function(adapter) {\n    this.adapters.push(adapter);\n  };\n\n  Flip.prototype.getAdapter = function(options) {\n    for(var i = 0; i < this.adapters.length; i++) {\n      var o, k;\n      var adapterName = this.adapters[i].adapterName;\n\n      if (options.common) {\n        o = {};\n        for(k in Object.keys(options.common)) o[k] = options.common[k];\n        if (options[adapterName]) {\n          for(k in Object.keys(options[adapterName])) o[k] = options[adapterName][k];\n        }\n      } else {\n        o = options;\n      }\n      if (this.adapters[i].detect(o)) return this.adapters[i];\n    }\n  };\n\n  Flip.prototype.connect = function(url, options, next) {\n    if (typeof options == 'function') {\n      next = options;\n      options = {};\n    }\n    var adapter = this.getAdapter(options);\n    if (!adapter) throw new Error('No suitable adapter found');\n\n    (new adapter(options)).connect(url, next);\n  };\n\n  Flip.prototype.generateId = function() {\n    function format(i) {\n      return i.toString(16).substring(1);\n    }\n    function r() {\n      return Math.floor((1 + Math.random()) * 0x10000);\n    }\n    return format(new Date().getTime()) + format(r()) + format(r()) + format(r());\n  };\n\n  return new Flip();\n}));\n\n\ndefine(\"Flip\", function(){});\n\n",
    "/*! Flip.js | (c) 2013 Rolf Sormo | https://github.com/rolfsormo/flipjs */\n\n(function (root, factory) {\n  var moduleName = 'KeyValueAdapter';\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(moduleName, ['Flip', 'MongoMatcher'], factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    var YAML;\n    try { YAML = require('libyaml'); } catch(e) { }\n    var bson;\n    try { bson = require('bson'); } catch(e) { }\n\n    module.exports = factory(require('./Flip'), require('./MongoMatcher'), YAML, bson);\n  } else {\n    // Browser globals (root is window)\n    root[moduleName] = factory(root.Flip, root.MongoMatcher);\n  }\n}(this, function (Flip, MongoMatcher, YAML, bson) {\n  var debug = true;\n\n  if (debug) {\n    if (!YAML) console.log('YAML not available');\n    if (!bson) console.log('bson not available');\n  }\n\n  function shortKey(base, length) {\n    base = base || 32;\n    length = length || 3;\n    return Math.floor(Math.pow(base,length-1) + Math.random() * (Math.pow(base,length) - Math.pow(base,length-1))).toString(base);\n  }\n\n  return function(adapter) {\n\n    function KeyValueAdapter(options) {\n      this.options = options;\n      this.options.sep = this.options.sep || '#';\n      this.options.keyBase = this.options.keyBase || 32;\n      this.options.keyLength = this.options.keyLength || 3;\n\n      if (YAML && this.options.allowYAML !== false) {\n        if (debug) console.log('* YAMLing');\n        this.serialize = YAML.stringify;\n        this.deserialize = function(data) { return (YAML.parse(data.toString()) || [{}])[0]; };\n      } else if (bson && this.options.allowBson !== false) {\n        if (debug) console.log('* bsoning');\n        this.serialize = function(doc) { return bson.BSONPure.BSON.serialize(doc, false, true, false); };\n        this.deserialize = function(str) { return bson.BSONPure.BSON.deserialize(str); };\n      } else {\n        if (debug) console.log('* JSONing');\n        this.serialize = JSON.stringify;\n        this.deserialize = JSON.parse;\n      }\n    }\n\n    // \"Statics\"\n    KeyValueAdapter.adapterName = adapter.adapterName;\n\n    KeyValueAdapter.detect = function(options) {\n      return adapter.detect(options);\n    };\n\n    KeyValueAdapter.toString = function()  {\n      return \"KeyValueAdapter#\" + adapter.adapterName;\n    };\n\n    // \"Non-statics\"\n    KeyValueAdapter.prototype.connect = function(dbName, next) {\n      var self = this;\n      this.dbName = dbName;\n      adapter.init(function() {\n        adapter.get('system', function(system) {\n          self.system = system || {};\n\n          self.system.collections = self.system.collections || {};\n          self.system.key = self.system.key || shortKey(self.options.keyBase, self.options.keyLength);\n          next(undefined, self);\n        });\n      });\n    };\n    function hasCollectionKey(collections, key) {\n      for(var k in collections) if (collections[k].key === key) return true;\n    }\n\n    KeyValueAdapter.prototype.collection = function(collection, options, next) {\n\n      if (typeof options === 'function') {\n        next = options;\n        options = undefined;\n      }\n\n      var kva = this;\n      var sys = this.system.collections[collection] || {};\n\n      var key = sys.key = sys.key || (this.system.key + shortKey(this.options.keyBase, this.options.keyLength));\n      while (hasCollectionKey(this.system.collections, sys.key)) {\n        sys.key = (this.system.key + shortKey(this.options.keyBase, this.options.keyLength));\n      }\n\n      function KVACollection(options, adapter) {\n        this.options = options;\n        this.adapter = adapter;\n      }\n      KVACollection.prototype.find = function(criteria, next) {\n        var self = this;\n        var matcher = new MongoMatcher(criteria);\n        adapter.keys(function(err, keys) {\n          if (err) return next(err);\n\n          var res = [];\n\n          function handle(err, data) {\n            if (err) return next(err);\n\n            if (data) {\n              // console.log('data', typeof data, data.length, data.toString());\n              var ob = self.adapter.deserialize(data);\n              // var ob = data;\n              console.log(' ============= MATCHING', criteria, 'to', ob);\n              if (matcher.match(ob)) {\n                res.push(ob);\n              }\n              console.log('----');\n            }\n\n            active--;\n            if (!active) {\n              console.log('res', res);\n              next(undefined, res);\n            }\n          }\n\n          var active = 1;\n          for(var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var r = key.split(self.options.sep);\n            console.log(sys.key, r);\n            if (r.length == 2 && sys.key === r[0]) {\n              active++;\n              adapter.get(key, handle);\n            }\n          }\n          handle();\n        });\n      };\n      KVACollection.prototype.insert = function(ob, next) {\n        if (!ob._id) ob._id = Flip.generateId();\n\n        var self = this;\n        var key = sys.key + this.options.sep + ob._id;\n        adapter.set(key, self.adapter.serialize(ob), function(err, val) {\n          next(err, ob);\n        });\n      };\n\n      KVACollection.prototype.update = function(ob, next) {\n        adapter.set(kva.dbName, collection, ob._id, this.adapter.serialize(ob), function(err, val) {\n          next(err, ob);\n        });\n      };\n\n      KVACollection.prototype.remove = function(criteria, next) {\n        var self = this;\n        this.find(criteria, function(err, list) {\n          if (err) return next(err);\n          if (!list.length) return next();\n\n          function handler(err) {\n            if (err) return next(err);\n\n            active--;\n            if (!active) next();\n          }\n\n          var active = 1;\n          for(var i = 0; i < list.length; i++) {\n            var key = sys.key + self.options.sep + list[i]._id;\n            active++;\n            adapter.remove(key, handler);\n          }\n          handle();\n        });\n      };\n\n      KVACollection.prototype.drop = function(next) {\n        var self = this;\n        adapter.keys(function(err, keys) {\n          if (err) return next(err);\n\n          function handle(err) {\n            if (err) return next(err);\n            active--;\n            if (!active) next();\n          }\n\n          var active = 1;\n          for(var i = 0; i < keys.length; i++) {\n            var r = keys[i].split(self.options.sep);\n            console.log('r', r);\n\n            if (r[0] === sys.key) {\n              active++;\n              adapter.remove(r[1], handle);\n            }\n          }\n          handle();\n        });\n      };\n      this[collection] = new KVACollection(this.options, this);\n      if (next) next(undefined, this[collection]);\n      return this[collection];\n    };\n\n    KeyValueAdapter.prototype.dropDatabase = function(next) {\n      var self = this;\n      console.log('===================== DROPPING DATABASE', this.dbName);\n      adapter.keys(function(err, keys) {\n        function handle(err) {\n          if (err) return next(err);\n          active--;\n          if (!active) next();\n        }\n\n        var active = 1;\n        for(var i = 0; i < keys.length; i++) adapter.remove(keys[i], handle);\n        handle();\n      });\n\n      // var colls = [];\n      // for(var c in this.system.collections) {\n      //   colls.push(this.system.collections[c].key);\n      // }\n\n      // adapter.keys(function(err, keys) {\n      //   function handle(err) {\n      //     if (err) return next(err);\n\n      //     active--;\n      //     if (!active) {\n      //       // Also remove system.\n      //       adapter.remove('system', next);\n      //     }\n      //   }\n      //   var active = 1;\n      //   for(var i = 0; i < keys.length; i++) {\n      //     var r = keys[i].split(this.options.sep);\n      //     if (colls.indexOf(r[0]) !== -1) {\n      //       active++;\n      //       adapter.remove(r[1], handler);\n      //     }\n      //   }\n      //   handle();\n      // });\n    };\n    KeyValueAdapter.prototype.toString = function()  {\n      return \"KeyValueAdapter#\" + adapter.adapterName + '/' + this.dbName;\n    };\n\n    return KeyValueAdapter;\n  };\n\n}));\n\n\ndefine(\"KeyValueAdapter\", function(){});\n\n",
    "/*! Flip.js | (c) 2013 Rolf Sormo | https://github.com/rolfsormo/flipjs */\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    require(['Flip', 'KeyValueAdapter'], factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    factory(require('../Flip'), require('../KeyValueAdapter'));\n  } else {\n    // Browser globals (root is window)\n     factory(root.Flip, root.KeyValueAdapter);\n  }\n}(this, function (Flip, KeyValueAdapter) {\n  var debug = false;\n\n  Flip.addAdapter(KeyValueAdapter({\n    adapterName: 'LocalStorage',\n    detect: function(options) {\n      try {\n        return 'localStorage' in window && window.localStorage !== null;\n      } catch (e) {\n        return false;\n      }\n    },\n    init: function(next) {\n      next();\n    },\n    keys: function(next) {\n      if (debug) console.log('-> KEYS');\n      var k = [];\n      for(var i = 0; i < localStorage.length; i++) k.push(localStorage.key(i));\n      next(undefined, k);\n    },\n    get: function(key, next) {\n      if (debug) console.log('-> GET', key);\n      next(undefined, window.localStorage.getItem(db + '_' + collection + '_' + key));\n    },\n    set: function(key, value, next) {\n      if (debug) console.log('-> SET', key, value);\n      window.localStorage.setItem(key, value);\n      next(undefined, value);\n    },\n    remove: function(key, next) {\n      if (debug) console.log('-> REMOVE', key);\n      window.localStorage.removeItem(key);\n      next();\n    }\n  }));\n}));\n\n\n\ndefine(\"adapters/LocalStorage\", function(){});\n\n",
    "/*! Flip.js | (c) 2013 Rolf Sormo | https://github.com/rolfsormo/flipjs */\n\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    require(['Flip', 'KeyValueAdapter'], factory);\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    factory(require('../Flip'), require('../KeyValueAdapter'));\n  } else {\n    // Browser globals (root is window)\n     factory(root.Flip, root.KeyValueAdapter);\n  }\n}(this, function (Flip, KeyValueAdapter) {\n  var debug = true;\n\n  var ob = {};\n  Flip.addAdapter(KeyValueAdapter({\n    adapterName: 'MemStorage',\n    detect: function(options) {\n      return !options.requirePersistency;\n    },\n    init: function(next) {\n      next();\n    },\n    keys: function(next) {\n      if (debug) console.log('[ KEYS');\n      console.log('keys', Object.keys(ob));\n      next(undefined, Object.keys(ob));\n    },\n    get: function(key, next) {\n      if (debug) console.log('[ GET', key);\n      next(undefined, ob[key]);\n    },\n    set: function(key, value, next) {\n      if (debug) console.log('[ SET', key, value);\n      ob[key] = value;\n      next();\n    },\n    remove: function(key, next) {\n      if (debug) console.log('[ REMOVE', key);\n      delete ob[key];\n      next();\n    }\n  }));\n}));\n\n\n\ndefine(\"adapters/MemStorage\", function(){});\n\n",
    "/*! Flip.js | (c) 2013 Rolf Sormo | https://github.com/rolfsormo/flipjs */\n\n(function (root, factory) {\n    console.log('loading...');\n  if (typeof define === 'function' && define.amd) {\n    // AMD.\n    throw new Error('FileStorage works only in Node.js');\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    factory(require('../Flip'), require('../KeyValueAdapter'), require('fs'));\n  } else {\n    // Browser\n    throw new Error('FileStorage works only in Node.js');\n  }\n}(this, function (Flip, KeyValueAdapter, fs) {\n  var debug = false;\n\n  Flip.addAdapter(KeyValueAdapter({\n    adapterName: 'FileStorage',\n    detect: function(options) {\n      this.options = options;\n      this.options.directory = this.options.directory || 'db';\n      if (debug) console.log('Allow File Storage: ', options.allowFileStorage);\n      return options.allowFileStorage && typeof window === 'undefined';\n    },\n    init: function(next) {\n      if (debug) console.log('Creating: ', this.options.directory);\n      fs.mkdir(this.options.directory, function(e) {\n        next();\n      });\n    },\n    keys: function(next) {\n      if (debug) console.log('[ KEYS');\n\n      fs.readdir(this.options.directory, function(err, files) {\n        if (err) return next(err);\n\n        if (debug) console.log('files', files);\n        next(undefined, files);\n      });\n    },\n    get: function(key, next) {\n      if (debug) console.log('[ GET', key);\n      key = key.replace('/', '_');\n      fs.readFile(this.options.directory + '/' + key, function(err, file) {\n        if (err) return next(err);\n\n        next(undefined, file);\n      });\n    },\n    set: function(key, value, next) {\n      if (debug) console.log('[ SET', key, value);\n      key = key.replace('/', '_');\n      fs.writeFile(this.options.directory + '/' + key, value, function(err) {\n        if (err) return next(err);\n\n        next();\n      });\n    },\n    remove: function(key, next) {\n      if (debug) console.log('[ REMOVE', key);\n      key = key.replace('/', '_');\n      fs.unlink(this.options.directory + '/' + key, function(err) {\n        if (err) return next(err);\n\n        next();\n      });\n    }\n  }));\n}));\n\n\n\ndefine(\"adapters/FileStorage\", function(){});\n\n"
  ]
}